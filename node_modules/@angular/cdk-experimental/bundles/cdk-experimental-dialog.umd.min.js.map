{"version":3,"file":"cdk-experimental-dialog.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk-experimental/dialog/dialog-container.ts","../../src/cdk-experimental/dialog/dialog-injectors.ts","../../src/cdk-experimental/dialog/dialog-config.ts","../../src/cdk-experimental/dialog/dialog-ref.ts","../../src/cdk-experimental/dialog/dialog.ts","../../src/cdk-experimental/dialog/dialog-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {FocusTrapFactory} from '@angular/cdk/a11y';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  PortalHostDirective,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  HostBinding,\n  Inject,\n  OnDestroy,\n  Optional,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {DialogConfig} from './dialog-config';\n\n\nexport function throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-dialog-container',\n  templateUrl: './dialog-container.html',\n  styleUrls: ['dialog-container.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [\n    trigger('dialog', [\n      state('enter', style({opacity: 1})),\n      state('exit, void', style({opacity: 0})),\n      transition('* => enter', animate('{{enterAnimationDuration}}')),\n      transition('* => exit, * => void', animate('{{exitAnimationDuration}}')),\n    ])\n  ],\n  host: {\n    '[@dialog]': `{\n      value: _state,\n      params: {\n        enterAnimationDuration: _config.enterAnimationDuration,\n        exitAnimationDuration: _config.exitAnimationDuration\n      }\n    }`,\n    '(@dialog.start)': '_onAnimationStart($event)',\n    '(@dialog.done)': '_animationDone.next($event)',\n  },\n})\nexport class CdkDialogContainer extends BasePortalOutlet implements OnDestroy {\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n   /** The class that traps and manages focus within the dialog. */\n  private _focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, false);\n\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('attr.aria-label') get _ariaLabel() { return this._config.ariaLabel || null; }\n\n  @HostBinding('attr.aria-describedby')\n  get _ariaDescribedBy() { return this._config.ariaDescribedBy; }\n\n  @HostBinding('attr.role') get _role() { return this._config.role; }\n\n  @HostBinding('attr.tabindex') get _tabindex() { return -1; }\n  // tslint:disable:no-host-decorator-in-concrete\n\n  /** The portal host inside of this container into which the dialog content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** A subject emitting before the dialog enters the view. */\n  _beforeEnter: Subject<void> = new Subject();\n\n  /** A subject emitting after the dialog enters the view. */\n  _afterEnter: Subject<void> = new Subject();\n\n  /** A subject emitting before the dialog exits the view. */\n  _beforeExit: Subject<void> = new Subject();\n\n  /** A subject emitting after the dialog exits the view. */\n  _afterExit: Subject<void> = new Subject();\n\n  /** Stream of animation `done` events. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: DialogConfig) {\n    super();\n\n    // We use a Subject with a distinctUntilChanged, rather than a callback attached to .done,\n    // because some browsers fire the done event twice and we don't want to emit duplicate events.\n    // See: https://github.com/angular/angular/issues/24084\n    this._animationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // Emit lifecycle events based on animation `done` callback.\n      if (event.toState === 'enter') {\n        this._autoFocusFirstTabbableElement();\n        this._afterEnter.next();\n        this._afterEnter.complete();\n      }\n\n      if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\n        this._returnFocusAfterDialog();\n        this._afterExit.next();\n        this._afterExit.complete();\n      }\n    });\n  }\n\n  /** Destroy focus trap to place focus back to the element focused before the dialog opened. */\n  ngOnDestroy() {\n    this._focusTrap.destroy();\n    this._animationDone.complete();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n\n  /** Emit lifecycle events based on animation `start` callback. */\n  _onAnimationStart(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._beforeEnter.next();\n      this._beforeEnter.complete();\n    }\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\n      this._beforeExit.next();\n      this._beforeExit.complete();\n    }\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExiting(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /**\n   * Autofocus the first tabbable element inside of the dialog, if there is not a tabbable element,\n   * focus the dialog instead.\n   */\n  private _autoFocusFirstTabbableElement() {\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n        // If we didn't find any focusable elements inside the dialog, focus the\n        // container so the user can't tab into other elements behind it.\n        if (!hasMovedFocus) {\n          this._elementRef.nativeElement.focus();\n        }\n      });\n    }\n  }\n\n  /** Returns the focus to the element focused before the dialog was open. */\n  private _returnFocusAfterDialog() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {\n  ComponentType,\n  Overlay,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {DialogRef} from './dialog-ref';\nimport {CdkDialogContainer} from './dialog-container';\nimport {DialogConfig} from './dialog-config';\n\n/** Injection token for the Dialog's ScrollStrategy. */\nexport const DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('DialogScrollStrategy');\n\n/** Injection token for the Dialog's Data. */\nexport const DIALOG_DATA = new InjectionToken<any>('DialogData');\n\n/** Injection token for the DialogRef constructor. */\nexport const DIALOG_REF = new InjectionToken<DialogRef<any>>('DialogRef');\n\n/** Injection token for the DialogConfig. */\nexport const DIALOG_CONFIG = new InjectionToken<DialogConfig>('DialogConfig');\n\n/** Injection token for the Dialog's DialogContainer component. */\nexport const DIALOG_CONTAINER =\n    new InjectionToken<ComponentType<CdkDialogContainer>>('DialogContainer');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ComponentType} from '@angular/cdk/overlay';\nimport {CdkDialogContainer} from './dialog-container';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n\nexport class DialogConfig<D = any> {\n  /** Component to use as the container for the dialog. */\n  containerComponent?: ComponentType<CdkDialogContainer>;\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The id of the dialog. */\n  id?: string;\n\n  /** The ARIA role of the dialog. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class(es) for the overlay panel. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a background. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class(es) for the backdrop. */\n  backdropClass?: string | undefined = '';\n\n  /** Whether the dialog can be closed by user interaction. */\n  disableClose?: boolean = false;\n\n  /** The width of the dialog. */\n  width?: string = '';\n\n  /** The height of the dialog. */\n  height?: string = '';\n\n  /** The minimum width of the dialog. */\n  minWidth?: string | number = '';\n\n  /** The minimum height of the dialog. */\n  minHeight?: string | number = '';\n\n  /** The maximum width of the dialog. */\n  maxWidth?: string | number = '80vw';\n\n  /** The maximum height of the dialog. */\n  maxHeight?: string | number = '';\n\n  /** The position of the dialog. */\n  position?: DialogPosition;\n\n  /** Data to be injected into the dialog content. */\n  data?: D | null = null;\n\n  /** The layout direction for the dialog content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n  enterAnimationDuration?: string = '225ms';\n\n  /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n  exitAnimationDuration?: string = '225ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy, OverlaySizeConfig} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs';\nimport {map, filter} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {CdkDialogContainer} from './dialog-container';\n\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nexport class DialogRef<T, R = any> {\n  /** The instance of the component in the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined;\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    public _overlayRef: OverlayRef,\n    protected _containerInstance: CdkDialogContainer,\n    readonly id: string = `dialog-${uniqueId++}`) {\n\n    // If the dialog has a backdrop, handle clicks from the backdrop.\n    if (_containerInstance._config.hasBackdrop) {\n      _overlayRef.backdropClick().subscribe(() => {\n        if (!this.disableClose) {\n          this.close();\n        }\n      });\n    }\n\n    this.beforeClosed().subscribe(() => {\n      this._overlayRef.detachBackdrop();\n    });\n\n    this.afterClosed().subscribe(() => {\n      this._overlayRef.detach();\n      this._overlayRef.dispose();\n      this.componentInstance = null!;\n    });\n\n    // Close when escape keydown event occurs\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /** Gets an observable that emits when the overlay's backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n    this._containerInstance._startExiting();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's width and height, defined, min and max.\n   * @param size New size for the overlay.\n   */\n  updateSize(size: OverlaySizeConfig): this {\n    if (size.width) {\n      this._getPositionStrategy().width(size.width.toString());\n    }\n    if (size.height) {\n      this._getPositionStrategy().height(size.height.toString());\n    }\n    this._overlayRef.updateSize(size);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n\n  /** Gets an observable that emits when dialog begins opening. */\n  beforeOpened(): Observable<void> {\n    return this._containerInstance._beforeEnter.asObservable();\n  }\n\n  /** Gets an observable that emits when dialog is finished opening. */\n  afterOpened(): Observable<void> {\n    return this._containerInstance._afterEnter.asObservable();\n  }\n\n  /** Gets an observable that emits when dialog begins closing. */\n  beforeClosed(): Observable<R | undefined> {\n    return this._containerInstance._beforeExit.pipe(map(() => this._result));\n  }\n\n  /** Gets an observable that emits when dialog is finished closing. */\n  afterClosed(): Observable<R | undefined> {\n    return this._containerInstance._afterExit.pipe(map(() => this._result));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  TemplateRef,\n  SkipSelf,\n  Optional,\n  Injectable,\n  Injector,\n  Inject,\n  ComponentRef,\n  OnDestroy,\n  Type\n} from '@angular/core';\nimport {ComponentPortal, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {of as observableOf, Observable, Subject, defer} from 'rxjs';\nimport {DialogRef} from './dialog-ref';\nimport {Location} from '@angular/common';\nimport {DialogConfig} from './dialog-config';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDialogContainer} from './dialog-container';\nimport {\n  ComponentType,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {startWith} from 'rxjs/operators';\n\nimport {\n  DIALOG_SCROLL_STRATEGY,\n  DIALOG_DATA,\n  DIALOG_REF,\n  DIALOG_CONTAINER,\n  DIALOG_CONFIG,\n} from './dialog-injectors';\n\n\n/**\n * Service to open modal dialogs.\n */\n@Injectable()\nexport class Dialog implements OnDestroy {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Stream that emits when all dialogs are closed. */\n  get _afterAllClosed(): Observable<void> {\n    return this._parentDialog ? this._parentDialog.afterAllClosed : this._afterAllClosedBase;\n  }\n  _afterAllClosedBase = new Subject<void>();\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed : this._afterAllClosed.pipe(startWith<void>(undefined)));\n\n  /** Stream that emits when a dialog is opened. */\n  get afterOpened(): Subject<DialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpened;\n  }\n  _afterOpened: Subject<DialogRef<any>> = new Subject();\n\n  /** Stream that emits when a dialog is opened. */\n  get openDialogs(): DialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogs;\n  }\n  _openDialogs: DialogRef<any>[] = [];\n\n  constructor(\n      private overlay: Overlay,\n      private injector: Injector,\n      @Inject(DIALOG_REF) private dialogRefConstructor: Type<DialogRef<any>>,\n      // TODO(crisbeto): the `any` here can be replaced\n      // with the proper type once we start using Ivy.\n      @Inject(DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: Dialog,\n      @Optional() location: Location) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /** Gets an open dialog by id. */\n  getById(id: string): DialogRef<any> | undefined {\n    return this._openDialogs.find(ref  => ref.id === id);\n  }\n\n  /** Closes all open dialogs. */\n  closeAll(): void {\n    this.openDialogs.forEach(ref => ref.close());\n  }\n\n  /** Opens a dialog from a component. */\n  openFromComponent<T>(component: ComponentType<T>, config?: DialogConfig): DialogRef<any> {\n    config = this._applyConfigDefaults(config);\n\n    if (config.id && this.getById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContentForComponent(component, dialogContainer,\n      overlayRef, config);\n\n    this.registerDialogRef(dialogRef);\n    return dialogRef;\n  }\n\n  /** Opens a dialog from a template. */\n  openFromTemplate<T>(template: TemplateRef<T>, config?: DialogConfig): DialogRef<any> {\n    config = this._applyConfigDefaults(config);\n\n    if (config.id && this.getById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContentForTemplate(template, dialogContainer,\n      overlayRef, config);\n\n    this.registerDialogRef(dialogRef);\n    return dialogRef;\n  }\n\n  ngOnDestroy() {\n    // Only close all the dialogs at this level.\n    this._openDialogs.forEach(ref => ref.close());\n  }\n\n  /**\n   * Forwards emitting events for when dialogs are opened and all dialogs are closed.\n   */\n  private registerDialogRef(dialogRef: DialogRef<any>): void {\n    this.openDialogs.push(dialogRef);\n\n    const dialogOpenSub = dialogRef.afterOpened().subscribe(() => {\n      this.afterOpened.next(dialogRef);\n      dialogOpenSub.unsubscribe();\n    });\n\n    const dialogCloseSub = dialogRef.afterClosed().subscribe(() => {\n      let dialogIndex = this._openDialogs.indexOf(dialogRef);\n\n      if (dialogIndex > -1) {\n        this._openDialogs.splice(dialogIndex, 1);\n      }\n\n      if (!this._openDialogs.length) {\n        this._afterAllClosedBase.next();\n        dialogCloseSub.unsubscribe();\n      }\n    });\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param config The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  protected _createOverlay(config: DialogConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this.overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: config.panelClass,\n      hasBackdrop: config.hasBackdrop,\n      direction: config.direction,\n      minWidth: config.minWidth,\n      minHeight: config.minHeight,\n      maxWidth: config.maxWidth,\n      maxHeight: config.maxHeight\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n    return this.overlay.create(overlayConfig);\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  protected _attachDialogContainer(overlay: OverlayRef, config: DialogConfig): CdkDialogContainer {\n    const container = config.containerComponent || this.injector.get(DIALOG_CONTAINER);\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this.injector, new WeakMap([\n      [DialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(container, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<CdkDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  protected _attachDialogContentForComponent<T>(\n      componentOrTemplateRef: ComponentType<T>,\n      dialogContainer: CdkDialogContainer,\n      overlayRef: OverlayRef,\n      config: DialogConfig): DialogRef<any> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\n    const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n    const contentRef = dialogContainer.attachComponentPortal(\n        new ComponentPortal(componentOrTemplateRef, undefined, injector));\n\n    dialogRef.componentInstance = contentRef.instance;\n    dialogRef.disableClose = config.disableClose;\n\n    dialogRef.updateSize({width: config.width, height: config.height})\n             .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  protected _attachDialogContentForTemplate<T>(\n      componentOrTemplateRef: TemplateRef<T>,\n      dialogContainer: CdkDialogContainer,\n      overlayRef: OverlayRef,\n      config: DialogConfig): DialogRef<any> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n    dialogContainer.attachTemplatePortal(\n      new TemplatePortal<T>(componentOrTemplateRef, null!,\n        <any>{$implicit: config.data, dialogRef}));\n    dialogRef.updateSize({width: config.width, height: config.height})\n             .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: DialogConfig,\n      dialogRef: DialogRef<T>,\n      dialogContainer: CdkDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [this.injector.get(DIALOG_REF), dialogRef],\n      [this.injector.get(DIALOG_CONTAINER), dialogContainer],\n      [DIALOG_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this.injector, injectionTokens);\n  }\n\n  /**\n   * Expands the provided configuration object to include the default values for properties which\n   * are undefined.\n   */\n  private _applyConfigDefaults(config?: DialogConfig): DialogConfig {\n    const dialogConfig = this.injector.get(DIALOG_CONFIG) as typeof DialogConfig;\n    return {...new dialogConfig(), ...config};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {Dialog} from './dialog';\nimport {CdkDialogContainer} from './dialog-container';\nimport {DialogConfig} from './dialog-config';\nimport {DialogRef} from './dialog-ref';\nimport {\n  DIALOG_CONFIG,\n  DIALOG_CONTAINER,\n  DIALOG_REF,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog-injectors';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n  ],\n  exports: [\n    // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n    // don't have to remember to import it or be faced with an unhelpful error.\n    PortalModule,\n    CdkDialogContainer,\n  ],\n  declarations: [\n    CdkDialogContainer,\n  ],\n  providers: [\n    Dialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    {provide: DIALOG_REF, useValue: DialogRef},\n    {provide: DIALOG_CONTAINER, useValue: CdkDialogContainer},\n    {provide: DIALOG_CONFIG, useValue: DialogConfig},\n  ],\n  entryComponents: [CdkDialogContainer],\n})\nexport class DialogModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","throwDialogContentAlreadyAttachedError","Error","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","apply","DialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","minWidth","minHeight","maxWidth","maxHeight","data","ariaDescribedBy","ariaLabel","autoFocus","enterAnimationDuration","exitAnimationDuration","CdkDialogContainer","_super","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_this","_state","_elementFocusedBeforeDialogWasOpened","_focusTrap","nativeElement","_beforeEnter","Subject","_afterEnter","_beforeExit","_afterExit","_animationDone","pipe","distinctUntilChanged","x","y","fromState","toState","subscribe","event","_autoFocusFirstTabbableElement","next","complete","_returnFocusAfterDialog","tslib_1.__extends","defineProperty","ngOnDestroy","destroy","attachComponentPortal","portal","_portalHost","hasAttached","_savePreviouslyFocusedElement","attachTemplatePortal","_onAnimationStart","_startExiting","markForCheck","Promise","resolve","then","focus","focusInitialElementWhenReady","hasMovedFocus","toFocus","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","trigger","state","style","opacity","transition","animate","host","[@dialog]","(@dialog.start)","(@dialog.done)","ChangeDetectorRef","undefined","decorators","Optional","Inject","DOCUMENT","propDecorators","_role","HostBinding","_tabindex","ViewChild","PortalHostDirective","uniqueId","DialogRef","_overlayRef","_containerInstance","id","backdropClick","close","beforeClosed","detachBackdrop","afterClosed","detach","dispose","componentInstance","keydownEvents","filter","keyCode","ESCAPE","dialogResult","_result","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","size","toString","getConfig","beforeOpened","asObservable","afterOpened","map","DIALOG_SCROLL_STRATEGY","InjectionToken","DIALOG_DATA","DIALOG_REF","DIALOG_CONFIG","DIALOG_CONTAINER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","Dialog","injector","dialogRefConstructor","scrollStrategy","_parentDialog","location","_afterAllClosedBase","afterAllClosed","defer","openDialogs","_afterAllClosed","startWith","_afterOpened","_openDialogs","closeAll","_scrollStrategy","getById","find","ref","forEach","openFromComponent","component","config","_applyConfigDefaults","overlayRef","_createOverlay","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContentForComponent","registerDialogRef","openFromTemplate","_attachDialogContentForTemplate","push","dialogOpenSub","unsubscribe","dialogCloseSub","dialogIndex","indexOf","splice","overlayConfig","OverlayConfig","positionStrategy","global","direction","container","containerComponent","get","userInjector","viewContainerRef","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","attach","instance","componentOrTemplateRef","_createInjector","contentRef","TemplatePortal","$implicit","injectionTokens","Directionality","set","value","change","observableOf","dialogConfig","tslib_1.__assign","Injectable","Injector","Type","SkipSelf","Location","ɵ0","ɵ1","ɵ2","DialogModule","NgModule","imports","CommonModule","OverlayModule","PortalModule","A11yModule","exports","declarations","providers","useValue","entryComponents"],"mappings":"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"}