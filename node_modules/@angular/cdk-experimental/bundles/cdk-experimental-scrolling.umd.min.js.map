{"version":3,"file":"cdk-experimental-scrolling.umd.min.js","sources":["../../src/cdk-experimental/scrolling/auto-size-virtual-scroll.ts","../../src/cdk-experimental/scrolling/scrolling-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ListRange} from '@angular/cdk/collections';\nimport {\n  CdkVirtualScrollViewport,\n  VIRTUAL_SCROLL_STRATEGY,\n  VirtualScrollStrategy\n} from '@angular/cdk/scrolling';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable} from 'rxjs';\n\n\n/**\n * A class that tracks the size of items that have been seen and uses it to estimate the average\n * item size.\n */\nexport class ItemSizeAverager {\n  /** The total amount of weight behind the current average. */\n  private _totalWeight = 0;\n\n  /** The current average item size. */\n  private _averageItemSize: number;\n\n  /** The default size to use for items when no data is available. */\n  private _defaultItemSize: number;\n\n  /** @param defaultItemSize The default size to use for items when no data is available. */\n  constructor(defaultItemSize = 50) {\n    this._defaultItemSize = defaultItemSize;\n    this._averageItemSize = defaultItemSize;\n  }\n\n  /** Returns the average item size. */\n  getAverageItemSize(): number {\n    return this._averageItemSize;\n  }\n\n  /**\n   * Adds a measurement sample for the estimator to consider.\n   * @param range The measured range.\n   * @param size The measured size of the given range in pixels.\n   */\n  addSample(range: ListRange, size: number) {\n    const newTotalWeight = this._totalWeight + range.end - range.start;\n    if (newTotalWeight) {\n      const newAverageItemSize =\n          (size + this._averageItemSize * this._totalWeight) / newTotalWeight;\n      if (newAverageItemSize) {\n        this._averageItemSize = newAverageItemSize;\n        this._totalWeight = newTotalWeight;\n      }\n    }\n  }\n\n  /** Resets the averager. */\n  reset() {\n    this._averageItemSize = this._defaultItemSize;\n    this._totalWeight = 0;\n  }\n}\n\n\n/** Virtual scrolling strategy for lists with items of unknown or dynamic size. */\nexport class AutoSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange = new Observable<number>(() => {\n    // TODO(mmalerba): Implement.\n    throw Error('cdk-virtual-scroll: scrolledIndexChange is currently not supported for the' +\n        ' autosize scroll strategy');\n  });\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /** The estimator used to estimate the size of unseen items. */\n  private _averager: ItemSizeAverager;\n\n  /** The last measured scroll offset of the viewport. */\n  private _lastScrollOffset: number;\n\n  /** The last measured size of the rendered content in the viewport. */\n  private _lastRenderedContentSize: number;\n\n  /** The last measured size of the rendered content in the viewport. */\n  private _lastRenderedContentOffset: number;\n\n  /**\n   * The number of consecutive cycles where removing extra items has failed. Failure here means that\n   * we estimated how many items we could safely remove, but our estimate turned out to be too much\n   * and it wasn't safe to remove that many elements.\n   */\n  private _removalFailures = 0;\n\n  /**\n   * @param minBufferPx The minimum amount of buffer rendered beyond the viewport (in pixels).\n   *     If the amount of buffer dips below this number, more items will be rendered.\n   * @param maxBufferPx The number of pixels worth of buffer to shoot for when rendering new items.\n   *     If the actual amount turns out to be less it will not necessarily trigger an additional\n   *     rendering cycle (as long as the amount of buffer is still greater than `minBufferPx`).\n   * @param averager The averager used to estimate the size of unseen items.\n   */\n  constructor(minBufferPx: number, maxBufferPx: number, averager = new ItemSizeAverager()) {\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._averager = averager;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._averager.reset();\n    this._viewport = viewport;\n    this._renderContentForCurrentOffset();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._viewport = null;\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    if (this._viewport) {\n      this._updateRenderedContentAfterScroll();\n    }\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    if (this._viewport) {\n      this._renderContentForCurrentOffset();\n      this._checkRenderedContentSize();\n    }\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() {\n    if (this._viewport) {\n      this._checkRenderedContentSize();\n    }\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() {\n    if (this._viewport) {\n      this._checkRenderedContentOffset();\n    }\n  }\n\n  /** Scroll to the offset for the given index. */\n  scrollToIndex(): void {\n    // TODO(mmalerba): Implement.\n    throw Error('cdk-virtual-scroll: scrollToIndex is currently not supported for the autosize'\n        + ' scroll strategy');\n  }\n\n  /**\n   * Update the buffer parameters.\n   * @param minBufferPx The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * @param maxBufferPx The number of buffer items to render beyond the edge of the viewport (in\n   *     pixels).\n   */\n  updateBufferSize(minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx) {\n      throw('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /** Update the rendered content after the user scrolls. */\n  private _updateRenderedContentAfterScroll() {\n    const viewport = this._viewport!;\n\n    // The current scroll offset.\n    const scrollOffset = viewport.measureScrollOffset();\n    // The delta between the current scroll offset and the previously recorded scroll offset.\n    let scrollDelta = scrollOffset - this._lastScrollOffset;\n    // The magnitude of the scroll delta.\n    let scrollMagnitude = Math.abs(scrollDelta);\n\n    // The currently rendered range.\n    const renderedRange = viewport.getRenderedRange();\n\n    // If we're scrolling toward the top, we need to account for the fact that the predicted amount\n    // of content and the actual amount of scrollable space may differ. We address this by slowly\n    // correcting the difference on each scroll event.\n    let offsetCorrection = 0;\n    if (scrollDelta < 0) {\n      // The content offset we would expect based on the average item size.\n      const predictedOffset = renderedRange.start * this._averager.getAverageItemSize();\n      // The difference between the predicted size of the unrendered content at the beginning and\n      // the actual available space to scroll over. We need to reduce this to zero by the time the\n      // user scrolls to the top.\n      // - 0 indicates that the predicted size and available space are the same.\n      // - A negative number that the predicted size is smaller than the available space.\n      // - A positive number indicates the predicted size is larger than the available space\n      const offsetDifference = predictedOffset - this._lastRenderedContentOffset;\n      // The amount of difference to correct during this scroll event. We calculate this as a\n      // percentage of the total difference based on the percentage of the distance toward the top\n      // that the user scrolled.\n      offsetCorrection = Math.round(offsetDifference *\n          Math.max(0, Math.min(1, scrollMagnitude / (scrollOffset + scrollMagnitude))));\n\n      // Based on the offset correction above, we pretend that the scroll delta was bigger or\n      // smaller than it actually was, this way we can start to eliminate the difference.\n      scrollDelta = scrollDelta - offsetCorrection;\n      scrollMagnitude = Math.abs(scrollDelta);\n    }\n\n    // The current amount of buffer past the start of the viewport.\n    const startBuffer = this._lastScrollOffset - this._lastRenderedContentOffset;\n    // The current amount of buffer past the end of the viewport.\n    const endBuffer = (this._lastRenderedContentOffset + this._lastRenderedContentSize) -\n        (this._lastScrollOffset + viewport.getViewportSize());\n    // The amount of unfilled space that should be filled on the side the user is scrolling toward\n    // in order to safely absorb the scroll delta.\n    const underscan = scrollMagnitude + this._minBufferPx -\n        (scrollDelta < 0 ? startBuffer : endBuffer);\n\n    // Check if there's unfilled space that we need to render new elements to fill.\n    if (underscan > 0) {\n      // Check if the scroll magnitude was larger than the viewport size. In this case the user\n      // won't notice a discontinuity if we just jump to the new estimated position in the list.\n      // However, if the scroll magnitude is smaller than the viewport the user might notice some\n      // jitteriness if we just jump to the estimated position. Instead we make sure to scroll by\n      // the same number of pixels as the scroll magnitude.\n      if (scrollMagnitude >= viewport.getViewportSize()) {\n        this._renderContentForCurrentOffset();\n      } else {\n        // The number of new items to render on the side the user is scrolling towards. Rather than\n        // just filling the underscan space, we actually fill enough to have a buffer size of\n        // `maxBufferPx`. This gives us a little wiggle room in case our item size estimate is off.\n        const addItems = Math.max(0, Math.ceil((underscan - this._minBufferPx + this._maxBufferPx) /\n            this._averager.getAverageItemSize()));\n        // The amount of filled space beyond what is necessary on the side the user is scrolling\n        // away from.\n        const overscan = (scrollDelta < 0 ? endBuffer : startBuffer) - this._minBufferPx +\n            scrollMagnitude;\n        // The number of currently rendered items to remove on the side the user is scrolling away\n        // from. If removal has failed in recent cycles we are less aggressive in how much we try to\n        // remove.\n        const unboundedRemoveItems = Math.floor(\n            overscan / this._averager.getAverageItemSize() / (this._removalFailures + 1));\n        const removeItems =\n            Math.min(renderedRange.end - renderedRange.start, Math.max(0, unboundedRemoveItems));\n\n        // The new range we will tell the viewport to render. We first expand it to include the new\n        // items we want rendered, we then contract the opposite side to remove items we no longer\n        // want rendered.\n        const range = this._expandRange(\n            renderedRange, scrollDelta < 0 ? addItems : 0, scrollDelta > 0 ? addItems : 0);\n        if (scrollDelta < 0) {\n          range.end = Math.max(range.start + 1, range.end - removeItems);\n        } else {\n          range.start = Math.min(range.end - 1, range.start + removeItems);\n        }\n\n        // The new offset we want to set on the rendered content. To determine this we measure the\n        // number of pixels we removed and then adjust the offset to the start of the rendered\n        // content or to the end of the rendered content accordingly (whichever one doesn't require\n        // that the newly added items to be rendered to calculate.)\n        let contentOffset: number;\n        let contentOffsetTo: 'to-start' | 'to-end';\n        if (scrollDelta < 0) {\n          let removedSize = viewport.measureRangeSize({\n            start: range.end,\n            end: renderedRange.end,\n          });\n          // Check that we're not removing too much.\n          if (removedSize <= overscan) {\n            contentOffset =\n                this._lastRenderedContentOffset + this._lastRenderedContentSize - removedSize;\n            this._removalFailures = 0;\n          } else {\n            // If the removal is more than the overscan can absorb just undo it and record the fact\n            // that the removal failed so we can be less aggressive next time.\n            range.end = renderedRange.end;\n            contentOffset = this._lastRenderedContentOffset + this._lastRenderedContentSize;\n            this._removalFailures++;\n          }\n          contentOffsetTo = 'to-end';\n        } else {\n          const removedSize = viewport.measureRangeSize({\n            start: renderedRange.start,\n            end: range.start,\n          });\n          // Check that we're not removing too much.\n          if (removedSize <= overscan) {\n            contentOffset = this._lastRenderedContentOffset + removedSize;\n            this._removalFailures = 0;\n          } else {\n            // If the removal is more than the overscan can absorb just undo it and record the fact\n            // that the removal failed so we can be less aggressive next time.\n            range.start = renderedRange.start;\n            contentOffset = this._lastRenderedContentOffset;\n            this._removalFailures++;\n          }\n          contentOffsetTo = 'to-start';\n        }\n\n        // Set the range and offset we calculated above.\n        viewport.setRenderedRange(range);\n        viewport.setRenderedContentOffset(contentOffset + offsetCorrection, contentOffsetTo);\n      }\n    } else if (offsetCorrection) {\n      // Even if the rendered range didn't change, we may still need to adjust the content offset to\n      // simulate scrolling slightly slower or faster than the user actually scrolled.\n      viewport.setRenderedContentOffset(this._lastRenderedContentOffset + offsetCorrection);\n    }\n\n    // Save the scroll offset to be compared to the new value on the next scroll event.\n    this._lastScrollOffset = scrollOffset;\n  }\n\n  /**\n   * Checks the size of the currently rendered content and uses it to update the estimated item size\n   * and estimated total content size.\n   */\n  private _checkRenderedContentSize() {\n    const viewport = this._viewport!;\n    this._lastRenderedContentSize = viewport.measureRenderedContentSize();\n    this._averager.addSample(viewport.getRenderedRange(), this._lastRenderedContentSize);\n    this._updateTotalContentSize(this._lastRenderedContentSize);\n  }\n\n  /** Checks the currently rendered content offset and saves the value for later use. */\n  private _checkRenderedContentOffset() {\n    const viewport = this._viewport!;\n    this._lastRenderedContentOffset = viewport.getOffsetToRenderedContentStart()!;\n  }\n\n  /**\n   * Recalculates the rendered content based on our estimate of what should be shown at the current\n   * scroll offset.\n   */\n  private _renderContentForCurrentOffset() {\n    const viewport = this._viewport!;\n    const scrollOffset = viewport.measureScrollOffset();\n    this._lastScrollOffset = scrollOffset;\n    this._removalFailures = 0;\n\n    const itemSize = this._averager.getAverageItemSize();\n    const firstVisibleIndex =\n        Math.min(viewport.getDataLength() - 1, Math.floor(scrollOffset / itemSize));\n    const bufferSize = Math.ceil(this._maxBufferPx / itemSize);\n    const range = this._expandRange(\n        this._getVisibleRangeForIndex(firstVisibleIndex), bufferSize, bufferSize);\n\n    viewport.setRenderedRange(range);\n    viewport.setRenderedContentOffset(itemSize * range.start);\n  }\n\n  // TODO: maybe move to base class, can probably share with fixed size strategy.\n  /**\n   * Gets the visible range of data for the given start index. If the start index is too close to\n   * the end of the list it may be backed up to ensure the estimated size of the range is enough to\n   * fill the viewport.\n   * Note: must not be called if `this._viewport` is null\n   * @param startIndex The index to start the range at\n   * @return a range estimated to be large enough to fill the viewport when rendered.\n   */\n  private _getVisibleRangeForIndex(startIndex: number): ListRange {\n    const viewport = this._viewport!;\n    const range: ListRange = {\n      start: startIndex,\n      end: startIndex +\n          Math.ceil(viewport.getViewportSize() / this._averager.getAverageItemSize())\n    };\n    const extra = range.end - viewport.getDataLength();\n    if (extra > 0) {\n      range.start = Math.max(0, range.start - extra);\n    }\n    return range;\n  }\n\n  // TODO: maybe move to base class, can probably share with fixed size strategy.\n  /**\n   * Expand the given range by the given amount in either direction.\n   * Note: must not be called if `this._viewport` is null\n   * @param range The range to expand\n   * @param expandStart The number of items to expand the start of the range by.\n   * @param expandEnd The number of items to expand the end of the range by.\n   * @return The expanded range.\n   */\n  private _expandRange(range: ListRange, expandStart: number, expandEnd: number): ListRange {\n    const viewport = this._viewport!;\n    const start = Math.max(0, range.start - expandStart);\n    const end = Math.min(viewport.getDataLength(), range.end + expandEnd);\n    return {start, end};\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize(renderedContentSize: number) {\n    const viewport = this._viewport!;\n    const renderedRange = viewport.getRenderedRange();\n    const totalSize = renderedContentSize +\n        (viewport.getDataLength() - (renderedRange.end - renderedRange.start)) *\n        this._averager.getAverageItemSize();\n    viewport.setTotalContentSize(totalSize);\n  }\n}\n\n/**\n * Provider factory for `AutoSizeVirtualScrollStrategy` that simply extracts the already created\n * `AutoSizeVirtualScrollStrategy` from the given directive.\n * @param autoSizeDir The instance of `CdkAutoSizeVirtualScroll` to extract the\n *     `AutoSizeVirtualScrollStrategy` from.\n */\nexport function _autoSizeVirtualScrollStrategyFactory(autoSizeDir: CdkAutoSizeVirtualScroll) {\n  return autoSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports unknown or dynamic size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[autosize]',\n  providers: [{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _autoSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkAutoSizeVirtualScroll)],\n  }],\n})\nexport class CdkAutoSizeVirtualScroll implements OnChanges {\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number { return this._minBufferPx; }\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to shoot for when rendering new items.\n   * If the actual amount turns out to be less it will not necessarily trigger an additional\n   * rendering cycle (as long as the amount of buffer is still greater than `minBufferPx`).\n   * Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number { return this._maxBufferPx; }\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy = new AutoSizeVirtualScrollStrategy(this.minBufferPx, this.maxBufferPx);\n\n  ngOnChanges() {\n    this._scrollStrategy.updateBufferSize(this.minBufferPx, this.maxBufferPx);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAutoSizeVirtualScroll} from './auto-size-virtual-scroll';\n\n\n@NgModule({\n  exports: [CdkAutoSizeVirtualScroll],\n  declarations: [CdkAutoSizeVirtualScroll],\n})\nexport class ScrollingModule {}\n"],"names":["_autoSizeVirtualScrollStrategyFactory","autoSizeDir","_scrollStrategy","ItemSizeAverager","defaultItemSize","this","_totalWeight","_defaultItemSize","_averageItemSize","prototype","getAverageItemSize","addSample","range","size","newTotalWeight","end","start","newAverageItemSize","reset","AutoSizeVirtualScrollStrategy","minBufferPx","maxBufferPx","averager","scrolledIndexChange","Observable","Error","_viewport","_removalFailures","_minBufferPx","_maxBufferPx","_averager","attach","viewport","_renderContentForCurrentOffset","detach","onContentScrolled","_updateRenderedContentAfterScroll","onDataLengthChanged","_checkRenderedContentSize","onContentRendered","onRenderedOffsetChanged","_checkRenderedContentOffset","scrollToIndex","updateBufferSize","scrollOffset","measureScrollOffset","scrollDelta","_lastScrollOffset","scrollMagnitude","Math","abs","renderedRange","getRenderedRange","offsetCorrection","predictedOffset","offsetDifference","_lastRenderedContentOffset","round","max","min","startBuffer","endBuffer","_lastRenderedContentSize","getViewportSize","underscan","addItems","ceil","overscan","unboundedRemoveItems","floor","removeItems","_expandRange","contentOffset","contentOffsetTo","removedSize","measureRangeSize","setRenderedRange","setRenderedContentOffset","measureRenderedContentSize","_updateTotalContentSize","getOffsetToRenderedContentStart","itemSize","firstVisibleIndex","getDataLength","bufferSize","_getVisibleRangeForIndex","startIndex","extra","expandStart","expandEnd","renderedContentSize","totalSize","setTotalContentSize","CdkAutoSizeVirtualScroll","Object","defineProperty","value","coerceNumberProperty","ngOnChanges","type","Directive","args","selector","providers","provide","VIRTUAL_SCROLL_STRATEGY","useFactory","deps","forwardRef","Input","ScrollingModule","NgModule","exports","declarations"],"mappings":"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"}